<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
<topic id="get-started-sample-code">
    <title>Get started sample code</title>
    <body>
        <p id="init-android">
         <codeblock props="video" outputclass="language-java">// Java
private void initializeAndJoinChannel() {
    try {
        mRtcEngine = RtcEngine.create(getBaseContext(), appId, mRtcEventHandler);
    } catch (Exception e) {
        throw new RuntimeException("Check the error.");
    }

    // By default, video is disabled, and you need to call enableVideo to start a video stream.
    mRtcEngine.enableVideo();

    FrameLayout container = findViewById(R.id.local_video_view_container);
    // Call CreateRendererView to create a SurfaceView object and add it as a child to the FrameLayout.
    SurfaceView surfaceView = RtcEngine.CreateRendererView(getBaseContext());
    container.addView(surfaceView);
    // Pass the SurfaceView object to Agora so that it renders the local video.
    mRtcEngine.setupLocalVideo(new VideoCanvas(surfaceView, VideoCanvas.RENDER_MODE_FIT, 0));

    // Join the channel with a token.
    mRtcEngine.joinChannel(token, channelName, "", 0);
}
   </codeblock>
   <codeblock props="video" outputclass="language-kotlin">// Kotlin
   private fun initializeAndJoinChannel() {
      try {
          mRtcEngine = RtcEngine.create(baseContext, APP_ID, mRtcEventHandler)
      } catch (e: Exception) {
   
      }
   
      // By default, video is disabled, and you need to call enableVideo to start a video stream.
      mRtcEngine!!.enableVideo()
   
      val localContainer = findViewById(R.id.local_video_view_container) as FrameLayout
      // Call CreateRendererView to create a SurfaceView object and add it as a child to the FrameLayout.
      val localFrame = RtcEngine.CreateRendererView(baseContext)
      localContainer.addView(localFrame)
      // Pass the SurfaceView object to Agora so that it renders the local video.
      mRtcEngine!!.setupLocalVideo(VideoCanvas(localFrame, VideoCanvas.RENDER_MODE_FIT, 0))
   
      // Join the channel with a token.
      mRtcEngine!!.joinChannel(TOKEN, CHANNEL, "", 0)
    }
   ```
   </codeblock>
   <codeblock props="live" outputclass="language-java">
private void initializeAndJoinChannel() {
 try {
     mRtcEngine = RtcEngine.create(getBaseContext(), appId, mRtcEventHandler);
 } catch (Exception e) {
     throw new RuntimeException("Check the error.");
 }

 // For a live streaming scenario, set the channel profile as BROADCASTING.
 mRtcEngine.setChannelProfile(Constants.CHANNEL_PROFILE_LIVE_BROADCASTING);
 // Set the client role as BORADCASTER or AUDIENCE according to the scenario.
 mRtcEngine.setClientRole(Constants.CLIENT_ROLE_BROADCASTER);

 // By default, video is disabled, and you need to call enableVideo to start a video stream.
 mRtcEngine.enableVideo();

 FrameLayout container = findViewById(R.id.local_video_view_container);
 // Call CreateRendererView to create a SurfaceView object and add it as a child to the FrameLayout.
 SurfaceView surfaceView = RtcEngine.CreateRendererView(getBaseContext());
 container.addView(surfaceView);
 // Pass the SurfaceView object to Agora so that it renders the local video.
 mRtcEngine.setupLocalVideo(new VideoCanvas(surfaceView, VideoCanvas.RENDER_MODE_FIT, 0));

 // Join the channel with a token.
 mRtcEngine.joinChannel(token, channelName, "", 0);
}    
   </codeblock>
</p>
        <p id="init-ios">
            <codeblock props="video" outputclass="language-swift">func initializeAndJoinChannel() {
// Pass in your App ID here
agoraKit = AgoraRtcEngineKit.sharedEngine(withAppId: "Your App ID", delegate: self)
// Video is disabled by default. You need to call enableVideo to start a video stream.
agoraKit?.enableVideo()
    // Create a videoCanvas to render the local video
    let videoCanvas = AgoraRtcVideoCanvas()
    videoCanvas.uid = 0
    videoCanvas.renderMode = .hidden
    videoCanvas.view = localView
    agoraKit?.setupLocalVideo(videoCanvas)

// Join the channel with a token. Pass in your token adn channel name here
agoraKit?.joinChannel(byToken: "Your token", channelId: "Channel name", info: nil, uid: 0, joinSuccess: { (channel, uid, elapsed) in
    })
}</codeblock>
            <codeblock props="live" outputclass="language-swift">func initializeAndJoinChannel() {
// Pass in your App ID here
agoraKit = AgoraRtcEngineKit.sharedEngine(withAppId: "Your App ID", delegate: self)
// For a live streaming scenario, set the channel profile as liveBroadcasting.
agoraKit?.setChannelProfile(.liveBroadcasting)
// Set the client role as broadcaster or audience.
agoraKit?.setClientRole(.broadcaster)
// Video is disabled by default. You need to call enableVideo to start a video stream.
agoraKit?.enableVideo()
    // Create a videoCanvas to render the local video
    let videoCanvas = AgoraRtcVideoCanvas()
    videoCanvas.uid = 0
    videoCanvas.renderMode = .hidden
    videoCanvas.view = localView
    agoraKit?.setupLocalVideo(videoCanvas)

// Join the channel with a token. Pass in your token adn channel name here
agoraKit?.joinChannel(byToken: "Your token", channelId: "Channel name", info: nil, uid: 0, joinSuccess: { (channel, uid, elapsed) in
    })
}</codeblock>
        </p>
    </body>
</topic>
